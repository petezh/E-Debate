color = margin)) +
geom_point()  +
geom_smooth(method="lm", se=F) +
ggtitle(expression(atop("Election Result and Change in COVID Deaths", atop(italic("By: Peter Zhang"), ""))))+
xlab("Biden Percent Margin of Victory") +
ylab("Change in Deaths per 100K") + scale_colour_gradient(low = muted("red"),  mid = "white", high = muted("blue"),  midpoint = 0,
guide = "colourbar",
aesthetics = "colour")
# create data frame
electionData = data.frame(rateChange = (covid$Oct_2020_Deaths-covid$June_2020_Deaths)/covid$Total.Population*100000, margin = election * 100)
# plot election data
ggplot(data = electionData,
aes(x = margin,
y = rateChange,
color = margin)) +
geom_point()  +
geom_smooth(method="lm", se=F) +
ggtitle(expression(atop("Election Result and Change in COVID Deaths", atop(italic("By: Peter Zhang"), ""))))+
xlab("Biden Percent Margin of Victory") +
ylab("Change in Deaths per 100K") + scale_colour_gradient2(low = muted("red"),  mid = "white", high = muted("blue"),  midpoint = 0,
guide = "colourbar",
aesthetics = "colour")
# create data frame
electionData = data.frame(rateChange = (covid$Oct_2020_Deaths-covid$June_2020_Deaths)/covid$Total.Population*100000, margin = election * 100)
# plot election data
ggplot(data = electionData,
aes(x = margin,
y = rateChange,
color = margin)) +
geom_point()  +
geom_smooth(method="lm", se=F) +
ggtitle(expression(atop("Election Result and Change in COVID Deaths", atop(italic("By: Peter Zhang"), ""))))+
xlab("Biden Percent Margin of Victory") +
ylab("Change in Deaths per 100K") + scale_color_gradient2(low = "red",  mid = "white", high = "red",  midpoint = 0,
guide = "colourbar",
aesthetics = "colour")
# test correlation
cor(electionData$rateChange, electionData$margin)
# create data frame
electionData = data.frame(rateChange = (covid$Oct_2020_Deaths-covid$June_2020_Deaths)/covid$Total.Population*100000, margin = election * 100)
# plot election data
ggplot(data = electionData,
aes(x = margin,
y = rateChange,
color = margin)) +
geom_point()  +
geom_smooth(method="lm", se=F) +
ggtitle(expression(atop("Election Result and Change in COVID Deaths", atop(italic("By: Peter Zhang"), ""))))+
xlab("Biden Percent Margin of Victory") +
ylab("Change in Deaths per 100K") + scale_color_gradient2(low = "red",  mid = "white", high = "blue",  midpoint = 0,
guide = "colourbar",
aesthetics = "colour")
# test correlation
cor(electionData$rateChange, electionData$margin)
# create data frame
electionData = data.frame(rateChange = (covid$Oct_2020_Deaths-covid$June_2020_Deaths)/covid$Total.Population*100000, margin = election * 100)
# plot election data
ggplot(data = electionData,
aes(x = margin,
y = rateChange,
color = margin)) +
geom_point()  +
geom_smooth(method="lm", se=F) +
ggtitle(expression(atop("Election Result and Change in COVID Deaths", atop(italic("By: Peter Zhang"), ""))))+
xlab("Biden Percent Margin of Victory") +
ylab("Change in Deaths per 100K") + scale_color_gradient2(low = "red",  mid = "black", high = "blue",  midpoint = 0,
guide = "colourbar",
aesthetics = "colour")
# test correlation
cor(electionData$rateChange, electionData$margin)
# create data frame
electionData = data.frame(rateChange = (covid$Oct_2020_Deaths-covid$June_2020_Deaths)/covid$Total.Population*100000, margin = election * 100)
# plot election data
ggplot(data = electionData,
aes(x = margin,
y = rateChange,
color = margin)) +
geom_point()  +
geom_smooth(method="lm", se=F) +
ggtitle(expression(atop("Election Result and Change in COVID Deaths", atop(italic("By: Peter Zhang"), ""))))+
xlab("Biden Percent Margin of Victory") +
ylab("Change in Deaths per 100K") + scale_color_gradient2(low = "red",  high = "blue",  midpoint = 0,
guide = "colourbar",
aesthetics = "colour")
# test correlation
cor(electionData$rateChange, electionData$margin)
# create data frame
electionData = data.frame(rateChange = (covid$Oct_2020_Deaths-covid$June_2020_Deaths)/covid$Total.Population*100000, margin = election * 100)
# plot election data
ggplot(data = electionData,
aes(x = margin,
y = rateChange,
color = margin)) +
geom_point()  +
geom_smooth(method="lm", se=F) +
ggtitle(expression(atop("Election Result and Change in COVID Deaths", atop(italic("By: Peter Zhang"), ""))))+
xlab("Biden Percent Margin of Victory") +
ylab("Change in Deaths per 100K") + scale_color_gradient2(low = "red",  high = "blue",  midpoint = 0,
guide = "colourbar",
aesthetics = "colour") +
theme(legend. position = "none")
# create data frame
electionData = data.frame(rateChange = (covid$Oct_2020_Deaths-covid$June_2020_Deaths)/covid$Total.Population*100000, margin = election * 100)
# plot election data
ggplot(data = electionData,
aes(x = margin,
y = rateChange,
color = margin)) +
geom_point()  +
geom_smooth(method="lm", se=F) +
ggtitle(expression(atop("Election Result and Change in COVID Deaths", atop(italic("By: Peter Zhang"), ""))))+
xlab("Biden Percent Margin of Victory") +
ylab("Change in Deaths per 100K") + scale_color_gradient2(low = "red",  high = "blue",  midpoint = 0,
guide = "colourbar",
aesthetics = "colour")
# test correlation
cor(electionData$rateChange, electionData$margin)
# create data frame
electionData = data.frame(rateChange = (covid$Oct_2020_Deaths-covid$June_2020_Deaths)/covid$Total.Population*100000, margin = election * 100)
# plot election data
ggplot(data = electionData,
aes(x = margin,
y = rateChange,
color = margin)) +
geom_point()  +
geom_smooth(method="lm", se=F) +
ggtitle(expression(atop("Election Result and Change in COVID Deaths", atop(italic("By: Peter Zhang"), ""))))+
xlab("Biden Percent Margin of Victory") +
ylab("Change in Deaths per 100K") + scale_color_gradient2(low = "red",  high = "blue",  midpoint = 0)
# test correlation
cor(electionData$rateChange, electionData$margin)
# create data frame
electionData = data.frame(rateChange = (covid$Oct_2020_Deaths-covid$June_2020_Deaths)/covid$Total.Population*100000, margin = election * 100)
# plot election data
ggplot(data = electionData,
aes(x = margin,
y = rateChange,
color = margin)) +
geom_point()  +
geom_smooth(method="lm", se=F) +
ggtitle(expression(atop("Election Result and Change in COVID Deaths", atop(italic("By: Peter Zhang"), ""))))+
xlab("Biden Percent Margin of Victory") +
ylab("Change in Deaths per 100K") +
scale_color_gradient2(low = "red",  high = "blue",  midpoint = 0) +
theme(legend.position = "none")
# test correlation
cor(electionData$rateChange, electionData$margin)
# create data frame
electionData = data.frame(rateChange = (covid$Oct_2020_Deaths-covid$June_2020_Deaths)/covid$Total.Population*100000, margin = election * 100)
# plot election data
ggplot(data = electionData,
aes(x = margin,
y = rateChange,
color = margin)) +
geom_point()  +
geom_smooth(method="lm", se=F, col="black") +
ggtitle(expression(atop("Election Result and Change in COVID Deaths", atop(italic("By: Peter Zhang"), ""))))+
xlab("Biden Percent Margin of Victory") +
ylab("Change in Deaths per 100K") +
scale_color_gradient2(low = "red",  high = "blue",  midpoint = 0) +
theme(legend.position = "none")
# test correlation
cor(electionData$rateChange, electionData$margin)
# create data frame
electionData = data.frame(rateChange = (covid$Oct_2020_Deaths-covid$June_2020_Deaths)/covid$Total.Population*100000, margin = election * 100)
# plot election data
ggplot(data = electionData,
aes(x = margin,
y = rateChange,
color = margin)) +
geom_point()  +
geom_smooth(method="lm", se=F, col="black") +
ggtitle(expression(atop("Election Result and Change in COVID Deaths", atop(italic("By: Peter Zhang"), ""))))+
xlab("Biden Percent Margin of Victory") +
ylab("Change in Deaths per 100K") +
scale_color_gradient2(low = "red", mid="grey", high = "blue",  midpoint = 0) +
theme(legend.position = "none")
# test correlation
cor(electionData$rateChange, electionData$margin)
read.csv("matched.csv")
read.csv("matched.csv")
read.csv("~/GitHub/HousingPrices/matched.csv")
data <- read.csv("~/GitHub/HousingPrices/matched.csv")
cor((data$Cases.9.30.2020-data$Cases.8.31.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Cases.9.30.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Cases.9.30.2020-data$Cases.6.30.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Cases.9.30.2020-data$Cases.7.31.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Cases.7.31.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Deaths.9.30.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Deaths.9.30.2020-data$Cases.7.31.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Deaths.9.30.2020-data$Cases.8.31.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Deaths.9.30.2020-data$Cases.6.30.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Deaths.9.30.2020-data$Cases.5.31.2020)/data$Population_2019, data$dem-data$rep)
knitr::opts_chunk$set(echo = TRUE)
sample_avg = 81/100
sample_se = 0.6/sqrt(100)
sample_avg - sample_se
sample_avg + sample_se
percent = 36/81
percent_sd = sqrt(36/81*(81-36)/81)
percent_se = percent_sd
percent = 36/81
percent_sd = sqrt(36/81*(81-36)/81)
percent_se = percent_sd/sqrt(81)
percent - percent_se
percent + percent_se
slope = -0.2*15/2
slope = -0.2*15/2
intercept = 66-slope*6
slope = -0.2*15/2
intercept = 66-slope*6
slope
intercept
slope*(3/2)
avg = 66 + (4-6) * slope
se = sqrt(1-(-0.2)^2) * 15
cutoff = 66+15*qnorm(0.8)
z_score = (cutoff-avg)/se
1-pnorm(z_score)
t.test(c(32.5, 33.1, 31.8, 33.6, 34),
alternative = 'less',
mu = 34)
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sdplus/sqrt(5)
tstat = (mean(obs) - 34)/seavg
1-pt(tstat, df=4)
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sdplus/sqrt(5)
tstat = (mean(obs) - 34)/seavg
tstat
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sdplus/sqrt(5)
tstat = (mean(obs) - 34)/seavg
1-pt(q, df)
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sdplus/sqrt(5)
tstat = (mean(obs) - 34)/seavg
1-pt(q, df=4)
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sdplus/sqrt(5)
tstat = (mean(obs) - 34)/seavg
1-pt(tstat, df=4)
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sdplus/sqrt(5)
tstat = (mean(obs) - 34)/seavg
tstat
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sdplus/sqrt(5)
seavg
tstat = (mean(obs) - 34)/seavg
tstat
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sd(obv)/sqrt(5)
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sd(obs)/sqrt(5)
tstat = (mean(obs) - 34)/seavg
tstat
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sdplus/sqrt(5)
tstat = (mean(obs) - 34)/seavg
pt(tstat, df=4)
t.test(obs,
alternative = 'less',
mu = 34)
se1 = 10/sqrt(350)
se2 = 9/sqrt(100)
sepooled = sqrt(se1^2+se2^2)
diff = 14-15
z_stat = diff/sepooled
pnorm(z_stat)
se1 = 10/sqrt(350)
se2 = 9/sqrt(100)
sepooled = sqrt(se1^2+se2^2)
diff = 14-15
z_stat = diff/sepooled
pnorm(z_stat)*2
num_dem = 0.4
num_ind = 0.25
num_rep = 0.35
num_iso = num_dem * 0.66 + num_ind * 0.45 + num_rep * 0.32
num_uniso = 1-num_iso
exp_dem_iso = num_dem * num_iso
exp_dem_unsio = num_dem*num_uniso
exp_ind_iso = num_ind * num_iso
exp_ind_unsio = num_ind*num_uniso
exp_rep_iso = num_rep * num_iso
exp_rep_unsio = num_rep*num_uniso
chisq_stat = (num_dem*0.66-exp_dem_iso)^2/exp_dem_iso + (num_dem*0.34-exp_dem_uniso)^2/exp_dem_uniso + (num_ind*0.45 - exp_ind_iso)^2/exp_ind_iso + (num_ind*0.55 - exp_ind_uniso)^2/exp_ind_uniso + (num_rep * 0.32 - exp_rep_iso)^2/exp_rep_iso + (num_rep * 0.68 - exp_rep_uniso)^2/exp_rep_uniso
num_dem = 0.4
num_ind = 0.25
num_rep = 0.35
num_iso = num_dem * 0.66 + num_ind * 0.45 + num_rep * 0.32
num_uniso = 1-num_iso
exp_dem_iso = num_dem * num_iso
exp_dem_uniso = num_dem*num_uniso
exp_ind_iso = num_ind * num_iso
exp_ind_uniso = num_ind*num_uniso
exp_rep_iso = num_rep * num_iso
exp_rep_uniso = num_rep*num_uniso
chisq_stat = (num_dem*0.66-exp_dem_iso)^2/exp_dem_iso + (num_dem*0.34-exp_dem_uniso)^2/exp_dem_uniso + (num_ind*0.45 - exp_ind_iso)^2/exp_ind_iso + (num_ind*0.55 - exp_ind_uniso)^2/exp_ind_uniso + (num_rep * 0.32 - exp_rep_iso)^2/exp_rep_iso + (num_rep * 0.68 - exp_rep_uniso)^2/exp_rep_uniso
pchisq(chisq_stat, df = 2)
chisq.test(x=c(c(0.1, 0.2), c(0.3, 0.5), c(0.3, 0.5)))
chisq.test(x=data.frame(one = c(0.1, 0.2), two = c(0.3, 0.5))))
chisq.test(x=data.frame(one = c(0.1, 0.2), two = c(0.3, 0.5)))
chisq.test(x=data.frame(iso = c(0.4*0.66, 0.25*0.45, 0.34*0.32), two = c(0.4*0.34, 0.25*0.55, 0.34*0.68)))
chisq.test(x=data.frame(iso = c(3000*0.4*0.66, 3000*0.25*0.45, 3000*0.34*0.32), two = c(3000*0.4*0.34, 3000*0.25*0.55, 3000*0.34*0.68)))
num_dem = 0.4
num_ind = 0.25
num_rep = 0.35
num_iso = num_dem * 0.66 + num_ind * 0.45 + num_rep * 0.32
num_uniso = 1-num_iso
exp_dem_iso = num_dem * num_iso
exp_dem_uniso = num_dem*num_uniso
exp_ind_iso = num_ind * num_iso
exp_ind_uniso = num_ind*num_uniso
exp_rep_iso = num_rep * num_iso
exp_rep_uniso = num_rep*num_uniso
chisq_stat = (num_dem*0.66-exp_dem_iso)^2/exp_dem_iso + (num_dem*0.34-exp_dem_uniso)^2/exp_dem_uniso + (num_ind*0.45 - exp_ind_iso)^2/exp_ind_iso + (num_ind*0.55 - exp_ind_uniso)^2/exp_ind_uniso + (num_rep * 0.32 - exp_rep_iso)^2/exp_rep_iso + (num_rep * 0.68 - exp_rep_uniso)^2/exp_rep_uniso
pchisq(chisq_stat*3000, df = 2)
num_dem = 0.4
num_ind = 0.25
num_rep = 0.35
num_iso = num_dem * 0.66 + num_ind * 0.45 + num_rep * 0.32
num_uniso = 1-num_iso
exp_dem_iso = num_dem * num_iso
exp_dem_uniso = num_dem*num_uniso
exp_ind_iso = num_ind * num_iso
exp_ind_uniso = num_ind*num_uniso
exp_rep_iso = num_rep * num_iso
exp_rep_uniso = num_rep*num_uniso
chisq_stat = (num_dem*0.66-exp_dem_iso)^2/exp_dem_iso + (num_dem*0.34-exp_dem_uniso)^2/exp_dem_uniso + (num_ind*0.45 - exp_ind_iso)^2/exp_ind_iso + (num_ind*0.55 - exp_ind_uniso)^2/exp_ind_uniso + (num_rep * 0.32 - exp_rep_iso)^2/exp_rep_iso + (num_rep * 0.68 - exp_rep_uniso)^2/exp_rep_uniso
chisq_stat*3000
pchisq(chisq_stat*3000, df = 2)
chisq.test(x=data.frame(iso = c(3000*0.4*0.66, 3000*0.25*0.45, 3000*0.35*0.32), two = c(3000*0.4*0.34, 3000*0.25*0.55, 3000*0.35*0.68)))
x <- scan("act19.txt", what="", sep="\n")
x <- scan("acts19", what="", sep="\n")
setwd(getSrcDirectory()[1])
x <- scan("acts19", what="", sep="\n")
library(utils)
setwd(getSrcDirectory()[1])
setwd(dirname(parent.frame(2)$ofile))
setwd("C:\Users\thepe\Documents\GitHub\disclosure")
setwd("C:\\Users\\thepe\\Documents\\GitHub\\disclosure")
x <- scan("acts19", what="", sep="\n")
x <- scan("act19", what="", sep="\n")
x <- scan("act19.txt", what="", sep="\n")
setwd("C:/Users/thepe/Documents/GitHub/disclosure")
x <- scan("act19.txt", what="", sep="\n")
x <- scan("acts19.txt", what="", sep="\n")
x
data19 <- scan("acts19.txt", what="", sep="\n")
data20 <- scan("acts20.txt", what="", sep="\n")
avg(data19)
average(data19)
sd(data19)
sd(data20)
sd(data19)/sqrt(length(data19))
sd(data20)/sqrt(length(data20))
se_pooled = sqrt(se1^2 + se2^2)
se1 = sd(data19)/sqrt(length(data19))
se2 = sd(data20)/sqrt(length(data20))
se_pooled = sqrt(se1^2 + se2^2)
0.079/se_pooled
pnorm(0.079/se_pooled)
1-pnorm(0.079/se_pooled)
data19 <- scan("incomes19.txt", what="", sep="\n")
data20 <- scan("incomes20.txt", what="", sep="\n")
se1 = sd(data19)/sqrt(length(data19))
se2 = sd(data20)/sqrt(length(data20))
se_pooled = sqrt(se1^2 + se2^2)
811/se_pooled
1-pnorm(811/se_pooled)
data19 <- scan("acts19.txt", what="", sep="\n")
data20 <- scan("acts20.txt", what="", sep="\n")
library(ggplot2)
library(ggplot2)
df=data.frame(weight=data19)
ggplot(df, aes(x=weight)) + geom_histogram()
data19
data19 <- as.numeric(scan("acts19.txt", what="", sep="\n"))
library(ggplot2)
df=data.frame(weight=data19)
ggplot(df, aes(x=weight)) + geom_histogram()
schapiro.test(data19)
library("dplyr")
library("ggpubr")
library(dplyr)
schapiro.test(data19)
shapiro.test(data19)
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
setwd("~/GitHub/E-Debate")
ggplot(data.frame(act=acts20), aes(x=act)) + geom_histogram()
acts19 <- as.numeric(scan("datasets/acts19.txt", what="", sep="\n"))
acts20 <- scan("datasets/acts20.txt", what="", sep="\n")
ggplot(data.frame(act=acts20), aes(x=act)) + geom_histogram()
sep
acts20 <- as.numeric(scan("datasets/acts20.txt", what="", sep="\n"))
ggplot(data.frame(act=acts20), aes(x=act)) + geom_histogram()
data19 <- as.numeric(scan("incomes19.txt", what="", sep="\n"))
data20 <- as.numeric(scan("incomes20.txt", what="", sep="\n"))
data19 <- as.numeric(scan("datasets/incomes19.txt", what="", sep="\n"))
data20 <- as.numeric(scan("datasets/incomes20.txt", what="", sep="\n"))
library(ggplot2)
# read act and income data
acts19 <- as.numeric(scan("datasets/acts19.txt", what="", sep="\n"))
acts20 <- as.numeric(scan("datasets/acts20.txt", what="", sep="\n"))
income19 <- as.numeric(scan("datasets/incomes19.txt", what="", sep="\n"))
income20 <- as.numeric(scan("datasets/incomes20.txt", what="", sep="\n"))
# test for normality
shapiro.test(acts19)
ggplot(data.frame(act=acts19), aes(x=act)) + geom_histogram()
shapiro.test(acts20)
ggplot(data.frame(act=acts20), aes(x=act)) + geom_histogram()
# significance test for act
se1 = sd(data19)/sqrt(length(data19))
se2 = sd(data20)/sqrt(length(data20))
se_pooled = sqrt(se1^2 + se2^2)
1-pnorm(0.079/se_pooled)
# test for normality
shapiro.test(income19)
ggplot(data.frame(income=income19), aes(x=income)) + geom_histogram()
shapiro.test(income20)
ggplot(data.frame(income=income20), aes(x=income)) + geom_histogram()
# significance test for income
se1 = sd(data19)/sqrt(length(data19))
se2 = sd(data20)/sqrt(length(data20))
se_pooled = sqrt(se1^2 + se2^2)
1-pnorm(811/se_pooled)
# read act and income data
acts19 <- as.numeric(scan("datasets/acts19.txt", what="", sep="\n"))
acts20 <- as.numeric(scan("datasets/acts20.txt", what="", sep="\n"))
income19 <- as.numeric(scan("datasets/incomes19.txt", what="", sep="\n"))
income20 <- as.numeric(scan("datasets/incomes20.txt", what="", sep="\n"))
# test for normality
shapiro.test(acts19)
ggplot(data.frame(act=acts19), aes(x=act)) + geom_histogram()
shapiro.test(acts20)
ggplot(data.frame(act=acts20), aes(x=act)) + geom_histogram()
# test for normality
ggplot(data.frame(act=acts19), aes(x=act)) + geom_histogram()
ggplot(data.frame(act=acts20), aes(x=act)) + geom_histogram()
# significance test for act
se1 = sd(acts19)/sqrt(length(acts19))
se2 = sd(acts20)/sqrt(length(acts20))
se_pooled = sqrt(se1^2 + se2^2)
1-pnorm(0.079/se_pooled)
# significance test for income
se1 = sd(income19)/sqrt(length(income19))
se2 = sd(income20)/sqrt(length(income20))
se_pooled = sqrt(se1^2 + se2^2)
1-pnorm(811/se_pooled)
se_pooled = sqrt(se1^2 + se2^2)
mean(acts20)-mean(acts19)
1-pnorm(0.144/se_pooled)
mean(income20)-mean(income19)
1-pnorm(1052/se_pooled)
mean(acts20)-mean(acts19)
1-pnorm(mean(acts20)-mean(acts19)/se_pooled)
1-pnorm((mean(acts20)-mean(acts19))/se_pooled)
1-pnorm(0.079/se_pooled)
1-pnorm(0.079/se_pooled)
mean(acts20)-mean(acts19)
1-pnorm(0.144/se_pooled)
se_pooled = sqrt(se1^2 + se2^2)
1-pnorm(0.144/se_pooled)
se_pooled
# significance test for act
se1 = sd(acts19)/sqrt(length(acts19))
se2 = sd(acts20)/sqrt(length(acts20))
se_pooled = sqrt(se1^2 + se2^2)
1-pnorm(0.144/se_pooled)
# significance test for income
se1 = sd(income19)/sqrt(length(income19))
se2 = sd(income20)/sqrt(length(income20))
se_pooled = sqrt(se1^2 + se2^2)
1-pnorm((mean(income19)-mean(income20))/se_pooled)
1-pnorm((mean(acts20)-mean(acts19))/se_pooled)
# significance test for act
se1 = sd(acts19)/sqrt(length(acts19))
se2 = sd(acts20)/sqrt(length(acts20))
se_pooled = sqrt(se1^2 + se2^2)
1-pnorm((mean(acts20)-mean(acts19))/se_pooled)
(mean(acts20)-mean(acts19)
(mean(acts20)-mean(acts19))
mean(acts20)-mean(acts19)
mean(acts20)-mean(acts19)
se_pooled
mean(acts20)-mean(acts19)/se_pooled
(mean(acts20)-mean(acts19))/se_pooled
1-pnorm(5.1399)
1-pnorm((mean(acts20)-mean(acts19))/se_pooled)
# test for normality
ggplot(data.frame(income=income19), aes(x=income)) + geom_histogram()
ggplot(data.frame(income=income20), aes(x=income)) + geom_histogram()
# significance test for income
se1 = sd(income19)/sqrt(length(income19))
se2 = sd(income20)/sqrt(length(income20))
se_pooled = sqrt(se1^2 + se2^2)
1-pnorm((mean(income19)-mean(income20))/se_pooled)
(mean(income19)-mean(income20))
1-pnorm((mean(income20)-mean(income19))/se_pooled)
